-- SCHEMA: telecom

-- DROP SCHEMA IF EXISTS telecom ;

CREATE SCHEMA IF NOT EXISTS telecom
    AUTHORIZATION postgres;


--PostgreSQL (Preferred way using SERIAL):

CREATE TABLE telecom.customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    mobile_number VARCHAR(15),
    city VARCHAR(50),
    balance NUMERIC(10,2)
);



--Alternative in PostgreSQL (Manual sequence):

CREATE SEQUENCE telecom.customer_seq START WITH 1 INCREMENT BY 1;

CREATE TABLE telecom.customers1 (
    customer_id INT PRIMARY KEY DEFAULT nextval('telecom.customer_seq'),
    name VARCHAR(100),
    mobile_number VARCHAR(15),
    city VARCHAR(50),
    balance NUMERIC(10,2)
);


--Insert Data

INSERT INTO telecom.customers (name, mobile_number, city, balance)
VALUES ('Surendra Panpaliya', '9876543210', 'Pune', 500.00),
('Dev Smith', '8765432109', 'Mumbai', 1200.00),
('Satish Panpaliya', '8765432107', 'Bangalore', 2200.00),
('Ashish Smith', '8765432102', 'Mumbai', 3200.00);

-- select query 

SELECT * from telecom.customers; 


-- Create Plans Table

CREATE TABLE telecom.plans (
    plan_id SERIAL PRIMARY KEY,
    plan_name VARCHAR(50),
    monthly_fee NUMERIC(10,2)
);


-- Create Subscriptions Table (Foreign Keys)

CREATE TABLE telecom.subscriptions (
    subscription_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES telecom.customers(customer_id),
    plan_id INT REFERENCES telecom.plans(plan_id),
    start_date DATE DEFAULT CURRENT_DATE );


-- Insert Data into Plans

INSERT INTO telecom.plans (plan_name, monthly_fee)
VALUES ('Basic', 199.00), ('Premium', 499.00),('Silver', 299.00), ('Gold', 699.00);

-- select query 
select * from telecom.plans; 


INSERT INTO telecom.subscriptions (customer_id, plan_id)
VALUES (1, 1),(2,2),(3,3),(4,4);

--With Custom start_date (optional override)

INSERT INTO telecom.subscriptions (customer_id, plan_id, start_date)
VALUES (3, 3, '2025-07-24');

select * from telecom.subscriptions;


-- Query Data with Join

SELECT c.name, p.plan_name, s.start_date
FROM telecom.customers c
JOIN telecom.subscriptions s ON c.customer_id = s.customer_id
JOIN telecom.plans p ON s.plan_id = p.plan_id;


-- View Sequences

-- List sequences in telecom schema:

SELECT sequence_name FROM information_schema.sequences 
WHERE sequence_schema = 'telecom';

--Check next value of a sequence:

SELECT nextval('telecom.customer_seq');


CREATE TABLE telecom.employees (
    emp_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(100)
);

CREATE TABLE telecom.employees1 (emp_id SERIAL PRIMARY KEY, name VARCHAR(100));


INSERT INTO telecom.employees OVERRIDING SYSTEM VALUE VALUES(10, 'Surendra Sharma');

INSERT INTO telecom.employees (name)

VALUES ('Dev Sharma');


SELECT * from telecom.employees;

CREATE TABLE telecom.employees2 (
    emp_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100)
);

INSERT INTO telecom.employees2 (emp_id, name)
VALUES (1002,'Amit Sharma'),
(1003,'Dev Sharma'),
(1004,'Alok Sharma');


SELECT * from telecom.employees2;

INSERT INTO telecom.employees2 (name)
VALUES ('Neha Verma'),
  ('Ravi Iyer'),
  ('Pooja Nair');

SELECT setval('telecom.employees2_emp_id_seq',(SELECT MAX(emp_id) FROM telecom.employees2));

-- Insert Sample Records

INSERT INTO telecom.employees (name)
VALUES 
  ('Amit Sharma'),
  ('Neha Verma'),
  ('Ravi Iyer'),
  ('Pooja Nair');
  

 -- Note: emp_id is auto-generated using GENERATED ALWAYS AS IDENTITY, so you only insert name.


-- Select All Employees

SELECT * FROM telecom.employees2;

-- WHERE Clause Examples

-- a. Find employee by name:

SELECT * FROM telecom.employees
WHERE name = 'Neha Verma';

-- b. Search by pattern (LIKE):

SELECT * FROM telecom.employees
WHERE name LIKE 'Pooja%';



-- Update an Employee Name

UPDATE telecom.employees
SET name = 'Neha Mehta'
WHERE emp_id = 2;


-- Delete an Employee

DELETE FROM telecom.employees
WHERE emp_id = 3;


-- Count Employees

SELECT COUNT(*) FROM telecom.employees;


-- Filter by ID Range

SELECT * FROM telecom.employees
WHERE emp_id BETWEEN 1 AND 3;


-- Example Comparison SERIAL


CREATE TABLE test_serial (
    id SERIAL PRIMARY KEY,
    name TEXT
);




 -- Drop Objects

DROP TABLE telecom.subscriptions;
DROP TABLE telecom.customers;
DROP TABLE telecom.plans;
DROP SEQUENCE telecom.customer_seq;
DROP SCHEMA telecom CASCADE;







