-- Database: amdocs_pg17

-- DROP DATABASE IF EXISTS amdocs_pg17;

CREATE DATABASE amdocs_pg17
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'C'
    LC_CTYPE = 'C'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;


-- =====================================================================
-- CAPSTONE: Building a Telecom Usage & Billing Data Platform on PG 17
-- Single runnable SQL (schema-first, no migrations)
-- Order: 1 Bootstrap  2 Core Tables  3 Indexes/Stats  4 Seed Data
--        5 Analyze/Sequences  6 Validation  7 Smoke Tests
--        8 Security/Views  9 Audit Trail  10 Partition Housekeeping
-- =====================================================================

-- =====================================================================
-- 1) BOOTSTRAP: schema + extensions
-- =====================================================================
CREATE SCHEMA IF NOT EXISTS tel;

CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
CREATE EXTENSION IF NOT EXISTS btree_gin;
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS unaccent;

-- =====================================================================
-- 2) CORE TABLES (normalized model, explicit constraints, partitions)
-- =====================================================================

-- Reference: Circles
DROP TABLE IF EXISTS tel.circle CASCADE;

CREATE TABLE tel.circle (
  circle_id    integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  circle_code  citext UNIQUE NOT NULL CHECK (length(circle_code) <= 16),
  circle_name  text NOT NULL
);

-- Reference: Plans
DROP TABLE IF EXISTS tel.plan CASCADE;

CREATE TABLE tel.plan (
  plan_id     integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  plan_code   citext UNIQUE NOT NULL CHECK (length(plan_code) <= 16),
  plan_name   text NOT NULL,
  plan_type   text NOT NULL CHECK (plan_type IN ('PREPAID','POSTPAID')),
  monthly_fee numeric(18,2) NOT NULL DEFAULT 0 CHECK (monthly_fee >= 0),
  created_at  timestamptz NOT NULL DEFAULT now(),
  updated_at  timestamptz NOT NULL DEFAULT now()
);

-- Master: Customers
DROP TABLE IF EXISTS tel.customer CASCADE;

CREATE TABLE tel.customer (
  customer_id bigint PRIMARY KEY,
  first_name  text NOT NULL,
  last_name   text NOT NULL,
  email       citext,
  msisdn      text UNIQUE CHECK (msisdn ~ '^[0-9]{10,15}$'),
  circle_id   integer REFERENCES tel.circle(circle_id),
  created_at  timestamptz NOT NULL DEFAULT now(),
  updated_at  timestamptz NOT NULL DEFAULT now()
);

-- Master: Accounts
DROP TABLE IF EXISTS tel.account CASCADE;

CREATE TABLE tel.account (
  account_id  bigint PRIMARY KEY,
  customer_id bigint NOT NULL REFERENCES tel.customer(customer_id),
  status      text NOT NULL CHECK (status IN ('ACTIVE','SUSPENDED','CLOSED')),
  balance     numeric(18,2) NOT NULL DEFAULT 0 CHECK (balance >= 0),
  created_at  timestamptz NOT NULL DEFAULT now(),
  updated_at  timestamptz NOT NULL DEFAULT now()
);

-- Master: Services
DROP TABLE IF EXISTS tel.service CASCADE;

CREATE TABLE tel.service (
  service_id     bigint PRIMARY KEY,
  account_id     bigint NOT NULL REFERENCES tel.account(account_id),
  plan_id        integer NOT NULL REFERENCES tel.plan(plan_id),
  activated_at   timestamptz NOT NULL,
  deactivated_at timestamptz,
  status         text NOT NULL CHECK (status IN ('ACTIVE','PENDING','BARRED','DISCONNECTED')),
  updated_at     timestamptz NOT NULL DEFAULT now()
);

-- Usage: CDRs (partitioned monthly by start_time)
DROP TABLE IF EXISTS tel.cdr CASCADE;

CREATE TABLE tel.cdr (
  cdr_id       bigint NOT NULL,
  service_id   bigint NOT NULL REFERENCES tel.service(service_id),
  start_time   timestamptz NOT NULL,
  end_time     timestamptz NOT NULL,
  duration_sec integer NOT NULL CHECK (duration_sec >= 0),
  call_type    text NOT NULL CHECK (call_type IN ('VOICE','SMS','DATA')),
  bytes_used   bigint NOT NULL DEFAULT 0,
  charge       numeric(18,2) NOT NULL DEFAULT 0 CHECK (charge >= 0),
  raw_payload  bytea,
  PRIMARY KEY (cdr_id, start_time)
) PARTITION BY RANGE (start_time);


-- Seed current and previous month partitions (adjust as needed)
DROP TABLE IF EXISTS tel.cdr_2025_08;

CREATE TABLE tel.cdr_2025_08 PARTITION OF tel.cdr
FOR VALUES FROM ('2025-08-01') TO ('2025-09-01');

DROP TABLE IF EXISTS tel.cdr_2025_07;

CREATE TABLE tel.cdr_2025_07 PARTITION OF tel.cdr
FOR VALUES FROM ('2025-07-01') TO ('2025-08-01');

-- Billing: Recharges
DROP TABLE IF EXISTS tel.recharge CASCADE;

CREATE TABLE tel.recharge (
  recharge_id   bigint PRIMARY KEY,
  account_id    bigint NOT NULL REFERENCES tel.account(account_id),
  recharge_time timestamptz NOT NULL,
  amount        numeric(18,2) NOT NULL CHECK (amount > 0),
  channel       text CHECK (channel IN ('APP','IVR','POS','WEB')),
  txn_ref       text UNIQUE
);

-- Billing: Bill Items
DROP TABLE IF EXISTS tel.bill_item CASCADE;

CREATE TABLE tel.bill_item (
  bill_item_id bigint PRIMARY KEY,
  account_id   bigint NOT NULL REFERENCES tel.account(account_id),
  bill_cycle   date NOT NULL,
  item_type    text NOT NULL CHECK (item_type IN ('USAGE','RENTAL','DISCOUNT','ADJUSTMENT','TAX')),
  amount       numeric(18,2) NOT NULL CHECK (amount >= 0),
  created_at   timestamptz NOT NULL DEFAULT now()
);

-- =====================================================================
-- 3) INDEXING & EXTENDED STATISTICS (common access paths)
-- =====================================================================

CREATE INDEX IF NOT EXISTS idx_customer_circle    ON tel.customer(circle_id);
CREATE INDEX IF NOT EXISTS idx_account_customer   ON tel.account(customer_id);
CREATE INDEX IF NOT EXISTS idx_service_account    ON tel.service(account_id);
CREATE INDEX IF NOT EXISTS idx_service_plan       ON tel.service(plan_id);
CREATE INDEX IF NOT EXISTS idx_cdr_service_start  ON tel.cdr (service_id, start_time);
CREATE INDEX IF NOT EXISTS idx_cdr_type_start     ON tel.cdr (call_type, start_time);
CREATE INDEX IF NOT EXISTS idx_bill_account_cycle ON tel.bill_item (account_id, bill_cycle);

-- Extended statistics for correlated columns
DROP STATISTICS IF EXISTS tel.service_plan_corr;

CREATE STATISTICS tel.service_plan_corr (dependencies) ON plan_id, status FROM tel.service;

-- =====================================================================
-- 4) SEED SAMPLE DATA (end-to-end demo)
-- =====================================================================

-- Circles
INSERT INTO tel.circle (circle_code, circle_name) VALUES
  ('MH-PUN', 'Maharashtra & Goa - Pune'),
  ('DL-NCR', 'Delhi NCR'),
  ('KA-BLR', 'Karnataka - Bengaluru')
ON CONFLICT (circle_code) DO NOTHING;

-- Plans
INSERT INTO tel.plan (plan_code, plan_name, plan_type, monthly_fee) VALUES
  ('PRED199', 'Prepaid Smart 199',  'PREPAID', 199.00),
  ('POST499','Postpaid Value 499',  'POSTPAID',499.00),
  ('POST999','Postpaid Ultra 999',  'POSTPAID',999.00)
ON CONFLICT (plan_code) DO NOTHING;

-- Customers
INSERT INTO tel.customer (customer_id, first_name, last_name, email, msisdn, circle_id) VALUES
  (10001, 'Aayush',  'Sharma',   'aayush@example.com', '919812345678', (SELECT circle_id FROM tel.circle WHERE circle_code='MH-PUN')),
  (10002, 'Pallavi', 'Bengeri',  'pallavi@example.com','918880112233', (SELECT circle_id FROM tel.circle WHERE circle_code='DL-NCR')),
  (10003, 'Dev',     'Panpaliya','dev@example.com',    '917700998877', (SELECT circle_id FROM tel.circle WHERE circle_code='KA-BLR'))
ON CONFLICT (customer_id) DO NOTHING;

-- Accounts
INSERT INTO tel.account (account_id, customer_id, status, balance) VALUES
  (20001, 10001, 'ACTIVE',    150.00),
  (20002, 10002, 'ACTIVE',      0.00),
  (20003, 10003, 'SUSPENDED',  50.00)
ON CONFLICT (account_id) DO NOTHING;

-- Services
INSERT INTO tel.service (service_id, account_id, plan_id, activated_at, status) VALUES
  (30001, 20001, (SELECT plan_id FROM tel.plan WHERE plan_code='PRED199'),  now() - interval '60 days', 'ACTIVE'),
  (30002, 20002, (SELECT plan_id FROM tel.plan WHERE plan_code='POST499'),  now() - interval '120 days','ACTIVE'),
  (30003, 20003, (SELECT plan_id FROM tel.plan WHERE plan_code='POST999'),  now() - interval '15 days', 'BARRED')
ON CONFLICT (service_id) DO NOTHING;

-- CDRs (August 2025 partition)
INSERT INTO tel.cdr (cdr_id, service_id, start_time, end_time, duration_sec, call_type, bytes_used, charge) VALUES
  (40000001, 30001, '2025-08-05 10:15:00+05:30', '2025-08-05 10:20:00+05:30', 300,  'VOICE',     0,       3.00),
  (40000002, 30001, '2025-08-06 09:05:00+05:30', '2025-08-06 09:05:10+05:30',  10,  'SMS',       0,       0.10),
  (40000003, 30001, '2025-08-06 21:00:00+05:30', '2025-08-06 22:00:00+05:30', 3600, 'DATA', 1048576,     15.00),
  (40000004, 30002, '2025-08-07 08:00:00+05:30', '2025-08-07 08:07:30+05:30', 450,  'VOICE',     0,       4.50),
  (40000005, 30002, '2025-08-10 14:30:00+05:30', '2025-08-10 15:30:00+05:30', 3600, 'DATA', 5242880,     49.00)
ON CONFLICT (cdr_id, start_time) DO NOTHING;

-- Recharges
INSERT INTO tel.recharge (recharge_id, account_id, recharge_time, amount, channel, txn_ref) VALUES
  (50001, 20001, now() - interval '5 days', 199.00, 'APP', 'TXN-PRED199-001'),
  (50002, 20001, now() - interval '1 days',  99.00, 'WEB', 'TXN-TOPUP99-001')
ON CONFLICT (recharge_id) DO NOTHING;

-- Bill Items (Aug 2025)
INSERT INTO tel.bill_item (bill_item_id, account_id, bill_cycle, item_type, amount, created_at) VALUES
  (60001, 20002, '2025-08-01', 'RENTAL',     499.00, now() - interval '2 days'),
  (60002, 20002, '2025-08-01', 'USAGE',       85.75, now() - interval '1 days'),
  (60003, 20001, '2025-08-01', 'USAGE',       18.10, now()),
  (60004, 20003, '2025-08-01', 'ADJUSTMENT', 10.00, now())
ON CONFLICT (bill_item_id) DO NOTHING;

-- =====================================================================
-- 5) ANALYZE + ALIGN IDENTITY SEQUENCES (safety after manual inserts)
-- =====================================================================

ANALYZE VERBOSE tel;

SELECT setval(pg_get_serial_sequence('tel.circle','circle_id'),
              (SELECT COALESCE(MAX(circle_id),0) + 1 FROM tel.circle), false);

SELECT setval(pg_get_serial_sequence('tel.plan','plan_id'),
              (SELECT COALESCE(MAX(plan_id),0) + 1 FROM tel.plan), false);

-- =====================================================================
-- 6) VALIDATION QUERIES (quality gates)
-- =====================================================================

-- Object counts
SELECT
  (SELECT COUNT(*) FROM tel.customer)  AS customers,
  (SELECT COUNT(*) FROM tel.account)   AS accounts,
  (SELECT COUNT(*) FROM tel.service)   AS services,
  (SELECT COUNT(*) FROM tel.cdr)       AS cdrs,
  (SELECT COUNT(*) FROM tel.bill_item) AS bill_items;

-- Orphans (should be zero rows)
SELECT a.account_id
FROM tel.account a
LEFT JOIN tel.customer c ON c.customer_id = a.customer_id
WHERE c.customer_id IS NULL;

SELECT s.service_id
FROM tel.service s
LEFT JOIN tel.account a ON a.account_id = s.account_id
WHERE a.account_id IS NULL;

-- Billing totals by cycle
SELECT bill_cycle, ROUND(SUM(amount),2) AS total_amount
FROM tel.bill_item
GROUP BY bill_cycle
ORDER BY bill_cycle;

-- =====================================================================
-- 7) OPERATIONAL / ANALYTICS SMOKE TESTS (with EXPLAIN ANALYZE)
-- =====================================================================

EXPLAIN ANALYZE
SELECT c.*
FROM tel.cdr c
JOIN tel.service s ON s.service_id = c.service_id
JOIN tel.account a ON a.account_id = s.account_id
JOIN tel.customer u ON u.customer_id = a.customer_id
WHERE u.msisdn = '919812345678'
  AND c.start_time >= now() - interval '7 days'
ORDER BY c.start_time DESC
LIMIT 100;

EXPLAIN ANALYZE
SELECT account_id,
       date_trunc('month', bill_cycle)::date AS month,
       SUM(amount) AS total_amount
FROM tel.bill_item
GROUP BY account_id, date_trunc('month', bill_cycle)
ORDER BY account_id, month;

-- =====================================================================
-- 8) SECURITY & OPTIONAL LEGACY VIEWS
-- =====================================================================

-- Example roles (uncomment/create as needed)
-- CREATE ROLE tel_app LOGIN PASSWORD '***';
-- CREATE ROLE tel_ro  LOGIN PASSWORD '***';

GRANT USAGE ON SCHEMA tel TO tel_app, tel_ro;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA tel TO tel_app;
GRANT SELECT ON ALL TABLES IN SCHEMA tel TO tel_ro;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA tel TO tel_app, tel_ro;

-- Optional: views in public schema for legacy tools
CREATE OR REPLACE VIEW public.customer AS SELECT * FROM tel.customer;

CREATE OR REPLACE VIEW public.account  AS SELECT * FROM tel.account;

-- =====================================================================
-- 9) AUDIT TRAIL (row-level change log; optional but recommended)
-- =====================================================================

CREATE SCHEMA IF NOT EXISTS tel_audit;

CREATE TABLE IF NOT EXISTS tel_audit.row_change_log (
  log_id     bigserial PRIMARY KEY,
  entity     text NOT NULL,
  pk_text    text NOT NULL,
  op         text NOT NULL CHECK (op IN ('I','U','D')),
  changed_at timestamptz NOT NULL DEFAULT now(),
  changed_by text DEFAULT current_user,
  before_row jsonb,
  after_row  jsonb
);

CREATE OR REPLACE FUNCTION tel.trg_audit_generic() RETURNS trigger AS $$
DECLARE pktext text;
BEGIN
  pktext := COALESCE(
    CASE WHEN TG_TABLE_NAME = 'customer' THEN COALESCE(NEW.customer_id,  OLD.customer_id)::text END,
    CASE WHEN TG_TABLE_NAME = 'account'  THEN COALESCE(NEW.account_id,   OLD.account_id)::text  END,
    CASE WHEN TG_TABLE_NAME = 'service'  THEN COALESCE(NEW.service_id,   OLD.service_id)::text  END,
    CASE WHEN TG_TABLE_NAME = 'cdr'      THEN COALESCE(NEW.cdr_id,       OLD.cdr_id)::text      END,
    CASE WHEN TG_TABLE_NAME = 'recharge' THEN COALESCE(NEW.recharge_id,  OLD.recharge_id)::text END,
    CASE WHEN TG_TABLE_NAME = 'bill_item'THEN COALESCE(NEW.bill_item_id, OLD.bill_item_id)::text END,
    'unknown'
  );

  IF TG_OP = 'INSERT' THEN
    INSERT INTO tel_audit.row_change_log(entity, pk_text, op, after_row)
    VALUES (TG_TABLE_NAME, pktext, 'I', to_jsonb(NEW));
    RETURN NEW;
  ELSIF TG_OP = 'UPDATE' THEN
    INSERT INTO tel_audit.row_change_log(entity, pk_text, op, before_row, after_row)
    VALUES (TG_TABLE_NAME, pktext, 'U', to_jsonb(OLD), to_jsonb(NEW));
    RETURN NEW;
  ELSE
    INSERT INTO tel_audit.row_change_log(entity, pk_text, op, before_row)
    VALUES (TG_TABLE_NAME, pktext, 'D', to_jsonb(OLD));
    RETURN OLD;
  END IF;
END
$$ LANGUAGE plpgsql;

-- Attach triggers
DROP TRIGGER IF EXISTS audit_customer ON tel.customer;

CREATE TRIGGER audit_customer AFTER INSERT OR UPDATE OR DELETE ON tel.customer
FOR EACH ROW EXECUTE FUNCTION tel.trg_audit_generic();

DROP TRIGGER IF EXISTS audit_account ON tel.account;

CREATE TRIGGER audit_account AFTER INSERT OR UPDATE OR DELETE ON tel.account
FOR EACH ROW EXECUTE FUNCTION tel.trg_audit_generic();

DROP TRIGGER IF EXISTS audit_service ON tel.service;

CREATE TRIGGER audit_service AFTER INSERT OR UPDATE OR DELETE ON tel.service
FOR EACH ROW EXECUTE FUNCTION tel.trg_audit_generic();

DROP TRIGGER IF EXISTS audit_cdr ON tel.cdr;
CREATE TRIGGER audit_cdr AFTER INSERT OR UPDATE OR DELETE ON tel.cdr
FOR EACH ROW EXECUTE FUNCTION tel.trg_audit_generic();

-- =====================================================================
-- 10) ROLLING PARTITION HOUSEKEEPING (auto-create next month)
-- =====================================================================

DO $$
DECLARE
  next_month date := date_trunc('month', now()) + interval '1 month';
  p_end      date := (date_trunc('month', now()) + interval '2 month')::date;
  part_name  text := format('cdr_%s_%s', to_char(next_month,'YYYY'), to_char(next_month,'MM'));
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = part_name AND relnamespace = 'tel'::regnamespace) THEN
    EXECUTE format(
      'CREATE TABLE tel.%I PARTITION OF tel.cdr FOR VALUES FROM (%L) TO (%L)',
      part_name, next_month, p_end
    );
  END IF;
END$$;

-- =====================================================================
-- END
-- =====================================================================